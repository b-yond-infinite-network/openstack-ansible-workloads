---
# Playbook to ensure docker swarm is installed and configured correctly

- name: we've choosen the instance
  run_once:           true
  debug:              msg="{{ os_swarm_lead }} to be the Swarm Leader"

- name: share public IP as Docker Swarm leader (hosts are public)
  set_fact:
    os_swarm_lead_ip: "{{ hostvars[ os_swarm_lead ].publicIPv4 }}"
  when:               private_node_number <= 0

- name: using host with following private IP as Docker Swarm leader (hosts are private)
  set_fact:
    os_swarm_lead_ip: "{{ hostvars[ os_swarm_lead ].privateIPv4 }}"
  when:               private_node_number > 0

- name: detect Docker Swarm status
  command:            docker info --format={% raw %}"{{.Swarm.LocalNodeState}}"{% endraw %}
  register:           swarm_status

- name: add all active Docker instances to Docker Swarm os_swarm group
  add_host:
    hostname:         "{{ inventory_hostname }}"
    groups:           os_swarm
  when:               swarm_status.stdout == 'active'

- name: make sure Docker Swarm Leader is active
  command:            docker swarm init --advertise-addr "{{ os_swarm_lead_ip }}"
  register:           docker_result
  until:              docker_result|success
  retries:            3
  delay:              10
  ignore_errors:      yes
  become:             yes
  when:               inventory_hostname == os_swarm_lead and swarm_status.stdout != 'active'

- name: determine Docker Swarm Leader is active and ...leading
  command:            docker info --format={% raw %}"{{.Swarm.ControlAvailable}}"{% endraw %}
  register:           swarm_lead_status
  when:               inventory_hostname == os_swarm_lead

- name: add Docker Swarm Leader to os_swarm_lead group
  add_host:
    hostname:         "{{ inventory_hostname }}"
    groups:           os_swarm_manager
  when:               inventory_hostname == os_swarm_lead and swarm_lead_status.stdout is defined and swarm_lead_status.stdout == 'true'

- name: pull Docker Swarm manager join token from leader
  command:            docker swarm join-token manager -q
  register:           leader_swarm_manager_jointoken
  until:              leader_swarm_manager_jointoken|success
  retries:            3
  delay:              30
  ignore_errors:      yes
  become:             yes
  when:               inventory_hostname == os_swarm_lead and swarm_lead_status.stdout is defined and swarm_lead_status.stdout == 'true'

- name: sharing Docker Swarm manager join token play-wide
  set_fact:
    os_swarm_manager_token: "{{ hostvars[ os_swarm_lead ].leader_swarm_manager_jointoken.stdout }}"

- name: checking swarm manager nodes status (all the public nodes)
  command:            docker info --format={% raw %}"{{range .Swarm.RemoteManagers}}{{.Addr}}{{end}}"{% endraw %}
  register:           node_docker_swarm_managers
  until:              node_docker_swarm_managers|success
  retries:            3
  delay:              10
  ignore_errors:      yes
  become:             yes
  when:               inventory_hostname != os_swarm_lead and inventory_hostname in groups[ 'public_nodes' ]

- name: info on swarm Managers
  debug:
    msg:              "{{ hostvars[ inventory_hostname ].privateIPv4 + ':2377' }}"

- name: register swarm manager nodes (all public nodes)
  command:            docker swarm join --token "{{ os_swarm_manager_token }}" "{{ os_swarm_lead_ip }}":2377
  register:           docker_swarm
  until:              docker_swarm|success
  retries:            3
  delay:              20
  ignore_errors:      yes
  become:             yes
  when:               inventory_hostname != os_swarm_lead and inventory_hostname in groups[ 'public_nodes' ] and ( hostvars[ inventory_hostname ].privateIPv4 not in node_docker_swarm_managers.stdout )

- name: pull Docker Swarm worker join token from leader
  command:            docker swarm join-token worker -q
  register:           leader_swarm_worker_jointoken
  until:              leader_swarm_worker_jointoken|success
  retries:            3
  delay:              30
  ignore_errors:      yes
  become:             yes
  when:               inventory_hostname == os_swarm_lead and swarm_lead_status.stdout is defined and swarm_lead_status.stdout == 'true'

- name: sharing Docker Swarm worker join token play-wide
  set_fact:
    os_swarm_worker_token: "{{ hostvars[ os_swarm_lead ].leader_swarm_worker_jointoken.stdout }}"

- name: checking swarm worker nodes status (all private nodes)
  command:            docker info --format={% raw %}"{{json .Swarm.RemoteManagers}}"{% endraw %}
  register:           node_docker_swarm
  until:              node_docker_swarm|success
  retries:            3
  delay:              10
  ignore_errors:      yes
  become:             yes
  when:               ( groups[ 'private_nodes' ] is defined ) and inventory_hostname in groups[ 'private_nodes' ]

- name: register swarm worker nodes
  command:            docker swarm join --token "{{ os_swarm_worker_token }}" "{{ os_swarm_lead_ip }}":2377
  register:           docker_swarm
  until:              docker_swarm|success
  retries:            3
  delay:              20
  ignore_errors:      yes
  become:             yes
  when:               ( groups[ 'private_nodes' ] is defined ) and inventory_hostname in groups[ 'private_nodes' ]
