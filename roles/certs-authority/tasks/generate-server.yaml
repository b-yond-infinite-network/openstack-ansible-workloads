---
# Playbook to ensure docker is installed

- name: ensure certificate directory exists
  file:
    path:             "{{ certs_directory }}"
    state:            directory
    mode:             0755

- name: CA generate server keys - ensure we certify the right node
  set_fact:
    host_to_certify:  "{{ item | default( inventory_hostname ) }}"

- name: ensure the openssl configuration is present
  blockinfile:
    create:           yes
    dest:             "{{ certs_directory }}{{ master_role }}-{{ host_to_certify }}-server.openssl.cnf"
    marker:           "#{mark} {{ playbook_name }}"
    block: |
                      [req]
                      req_extensions = v3_req
                      distinguished_name = req_distinguished_name
                      [req_distinguished_name]
                      [ v3_req ]
                      basicConstraints = CA:FALSE
                      keyUsage = nonRepudiation, digitalSignature, keyEncipherment
                      extendedKeyUsage = serverAuth, clientAuth
                      subjectAltName = @alt_names

                      [alt_names]
                      {% for current_dnsname in server_dnsnames %}
                      DNS.{{loop.index}} = {{ current_dnsname }}
                      {% endfor %}
                      IP.1 = 127.0.0.1
                      {{ ( publicIPv4 is defined and publicIPv4 != '' ) | ternary( 'IP.2 = ' + privateIPv4, 'IP.2 = ' +  ansible_ssh_host ) }}
                      {{ ( publicIPv4 is defined and publicIPv4 != '' ) | ternary( 'IP.3 = ' + ansible_ssh_host, '' ) }}

## private key management
- name: CA generate server keys - upload server private key if it's passed as parameter server_privatekey_filepath=
  when:               server_privatekey_filepath is defined
  copy:
    directory_mode:   0755
    src:              "{{ server_privatekey_filepath }}"
    dest:             "{{ certs_directory }}{{ master_role }}-{{ host_to_certify }}-server.privatekey.key"

- name: CA generate server keys - checking if server private key exists
  stat:
    path:             "{{ certs_directory }}{{ master_role }}-{{ host_to_certify }}-server.privatekey.key"
  register:           server_privatekey_exist

- name: CA generate server keys - generate server private key if it does not exist already
  when:               server_privatekey_exist.stat.exists == False
  shell:              "openssl genrsa -out {{ certs_directory }}{{ master_role }}-{{ host_to_certify }}-server.privatekey.key {{ key_size }}"

## Certificate Request management
- name: CA generate server keys - upload Certificate Request if it's passed as parameter server_csr_filepath=
  when:               server_csr_filepath is defined
  copy:
    directory_mode:   0755
    src:              "{{ server_csr_filepath }}"
    dest:             "{{ certs_directory }}{{ master_role }}-{{ host_to_certify }}-server.csr"

- name: CA generate server keys - checking if Certificate Request exists
  stat:
    path:             "{{ certs_directory }}{{ master_role }}-{{ host_to_certify }}-server.csr"
  register:           server_csr_exist

- name: CA generate server keys - generate Certificate Request if does not exist already
  when:               server_csr_exist.stat.exists == False
  shell:              "openssl req -new -key {{ certs_directory }}{{ master_role }}-{{ host_to_certify }}-server.privatekey.key \
                        -out {{ certs_directory }}{{ master_role }}-{{ host_to_certify }}-server.csr \
                        -config {{ certs_directory }}{{ master_role }}-{{ host_to_certify }}-server.openssl.cnf \
                        -subj '/CN={{ master_role }}-{{ host_to_certify | md5 }}-server'"

- name: CA generate server keys - generate the Server certificate
  include_role:
    name:             certs-authority
    tasks_from:       generate_from_csr
  vars:
    request_type:     "server"
    host_to_sign:     "{{ host_to_certify }}"

- name: CA generate server keys - adding this node as a signed server by the CA
  #no_log:                         true
  add_host:
    name:             "{{ host_to_certify }}"
    groups:           certs-server

- name: CA generate server keys - the current node is a signed server
  debug:
    msg:              "node ID : {{ host_to_certify }}"
