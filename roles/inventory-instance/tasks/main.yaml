---
# Playbook to instanciate an OpenStack instance

- name: we currently have
  debug:
    msg:                          "{{ ( groups[ master_role + '-public_nodes' ] | default( [] ) ) | length }} public nodes and {{ ( groups[ master_role + '-private_nodes' ] | default( [] ) ) | length }} private nodes"

- name: we need to have
  debug:
    msg:                          "{{ public_node_number }} public nodes and {{ private_node_number }} private nodes"

- name: ensure security group for public facing nodes exists
  os_security_group:
    cloud:                        "{{ os_cloud_name }}"
    state:                        present
    name:                         "{{ master_role }}-public-secgroup"
    description:                  "security group for public {{ master_role }} servers"

- name: ensure HTTP is allowed from anywhere for public nodes in public-secgroup
  os_security_group_rule:
    cloud:                        "{{ os_cloud_name }}"
    security_group:               "{{ master_role }}-public-secgroup"
    protocol:                     tcp
    port_range_min:               80
    port_range_max:               80
    remote_ip_prefix:             0.0.0.0/0

- name: ensure HTTPS is allowed from anywhere for public nodes in public-secgroup
  os_security_group_rule:
    cloud:                        "{{ os_cloud_name }}"
    security_group:               "{{ master_role }}-public-secgroup"
    protocol:                     tcp
    port_range_min:               443
    port_range_max:               443
    remote_ip_prefix:             0.0.0.0/0

- name: ensure SSH is allowed from anywhere for public nodes in public-secgroup
  os_security_group_rule:
    cloud:                        "{{ os_cloud_name }}"
    security_group:               "{{ master_role }}-public-secgroup"
    protocol:                     tcp
    port_range_min:               22
    port_range_max:               22
    remote_ip_prefix:              0.0.0.0/0

- name: ensure all TCP is allowed from private network to the public interface in public-secgroup
  os_security_group_rule:
    cloud:                        "{{ os_cloud_name }}"
    security_group:               "{{ master_role }}-public-secgroup"
    protocol:                     tcp
    port_range_min:               1
    port_range_max:               65535
    remote_ip_prefix:               "{{ os_cloud_privatesubnet_cidr }}"
  when:                           os_cloud_privatesubnet_cidr is defined

- name: ensure all UDP is allowed from private network to the public interface in public-secgroup
  os_security_group_rule:
    cloud:                        "{{ os_cloud_name }}"
    security_group:               "{{ master_role }}-public-secgroup"
    protocol:                     udp
    port_range_min:               1
    port_range_max:               65535
    remote_ip_prefix:             "{{ os_cloud_privatesubnet_cidr }}"
  when:                           os_cloud_privatesubnet_cidr is defined

- name: ensure all ICMP is allowed from private network to the public interface in public-secgroup
  os_security_group_rule:
    cloud:                        "{{ os_cloud_name }}"
    security_group:               "{{ master_role }}-public-secgroup"
    protocol:                     icmp
    port_range_min:               1
    port_range_max:               255
    remote_ip_prefix:             "{{ os_cloud_privatesubnet_cidr }}"
  when:                           os_cloud_privatesubnet_cidr is defined

- set_fact:
    public_cleanup_count:           "{{ ( ( ( groups[ master_role + '-public_nodes' ] | default( [] ) ) | length ) - ( public_node_number | int ) > 0 ) | ternary( ( ( groups[ master_role + '-public_nodes' ] | default( [] ) ) | length ) - ( public_node_number | int ), 0 ) }}"

- block:
  - name: ensure extraneous public node are deleted
    os_server:
      cloud:                        "{{ os_cloud_name }}"
      state:                        absent
      name:                         "{{ os_instancename_prefix + 'publicnode' + ( public_node_number | int + item | int ) | string }}"
    with_sequence:                count="{{ public_cleanup_count }}"
  when:                           public_cleanup_count > 0

- name: ensure public-facing nodes are up
  # no_log:                         true
  os_server:
    cloud:                        "{{ os_cloud_name }}"
    state:                        present
    name:                         "{{ os_instancename_prefix + 'publicnode'+ item }}"
    image:                        "{{ os_cloud_image_name }}"
    key_name:                     "{{ os_key_name }}"
    flavor:                       "{{ os_cloud_flavor_name }}"
    nics:
      - net-name:                 "{{ os_cloud_publicnetwork_name | default( '' ) }}"
      - net-name:                 "{{ os_cloud_privatenetwork_name | default( '' ) }}"
    meta:
      tags:                       "{{ os_instance_tags }}"
      groups:                     "ansible_nodes,{{ master_role }},meta-group_{{ os_instance_tags }},{{ master_role }}-public_nodes,public_nodes"
      key_name:                   "{{ os_key_name }}"
    wait:                         yes
  with_sequence:                  count="{{ public_node_number | int }}"
  register:                       created_public_os_instances
    #security_groups:             "{{ master_role }}-public-secgroup"

- name: wait until SSH is available for public nodes
  no_log:                         true
  when:                           os_cloud_publicnetwork_name is defined and item[ 'openstack' ] is defined and item[ 'openstack' ][ 'networks' ]
  local_action:
    module:                       wait_for
    host:                         "{{ item[ 'openstack' ][ 'networks' ][ os_cloud_publicnetwork_name ][ 0 ] }}"
    port:                         22
    delay:                        5
    timeout:                      40
    state:                        started
  with_items:                     "{{ created_public_os_instances.results }}"

- name: finding public-facing port of public nodes
  no_log:                         true
  when:                           os_cloud_publicnetwork_id is defined
  os_port_facts:
    cloud:                        "{{ os_cloud_name }}"
    filters:
      device_id:                  "{{ item[ 'openstack' ][ 'id' ] }}"
      network_id:                 "{{ os_cloud_publicnetwork_id }}"
      status:                     ACTIVE
  with_items:                     "{{ created_public_os_instances.results }}"
  register:                       public_ports

- name: assign security group to public-facing interface of public nodes
  no_log:                         true
  os_port:
    cloud:                        "{{ os_cloud_name }}"
    state:                        present
    name:                         "{{ item.ansible_facts.openstack_ports[ 0 ].id }}"
    security_groups:              "{{ master_role }}-public-secgroup"
  with_items:                     "{{ public_ports.results }}"

- name:                           forcing local DNS attribution on private subnet
  when:                           os_cloud_privatenetwork_name is defined
  os_subnet:
    cloud:                        "{{ os_cloud_name }}"
    state:                        present
    network_name:                 "{{ os_cloud_privatenetwork_name }}"
    name:                         "{{ os_cloud_privatesubnet_id | default( '' )  }}"
    cidr:                         "{{ os_cloud_privatesubnet_cidr | default( '' )  }}"
    dns_nameservers:
       - "{{ global_dns_server_1 }}"
       - "{{ global_dns_server_2 }}"

- set_fact:
    private_cleanup_count:        "{{ ( ( ( groups[ master_role + '-private_nodes' ] | default( [] ) ) | length ) - ( private_node_number | int ) > 0 ) | ternary( ( ( groups[ master_role + '-private_nodes' ] | default( [] ) ) | length ) - ( private_node_number | int ), 0 ) }}"

- block:
  - name: ensure extraneous public node are deleted
    os_server:
      cloud:                        "{{ os_cloud_name }}"
      state:                        absent
      name:                         "{{ os_instancename_prefix + 'privatenode' + ( private_node_number | int + item | int ) | string }}"
    with_sequence:                count="{{ private_cleanup_count }}"
  when:                           private_cleanup_count > 0

- name: ensure private instance are up
  no_log:                         true
  os_server:
    cloud:                        "{{ os_cloud_name }}"
    state:                        present
    name:                         "{{ os_instancename_prefix + 'privatenode' + ( item|int + private_node_number|int )|string }}"
    image:                        "{{ os_cloud_image_name }}"
    key_name:                     "{{ os_key_name }}"
    flavor:                       "{{ os_cloud_flavor_name }}"
    network:                      "{{ os_cloud_privatenetwork_name }}"
    meta:
      tags:                       "{{ os_instance_tags }}"
      groups:                     "ansible_nodes,{{ master_role }},meta-group_{{ os_instance_tags }},{{ master_role }}-private_nodes,private_nodes"
      key_name:                   "{{ os_key_name }}"
    wait:                         yes
  register:                       created_private_os_instances
  with_sequence:                  count="{{ private_node_number | int }}"

- name: refresh inventory after delete
  meta: refresh_inventory

- name: refresh inventory with newly created public-facing nodes detailed infos
  no_log:                         true
  add_host:
    name:                         "{{ hostvars[ item ].openstack.id }}"
    groups:                       "ansible_nodes,{{ master_role }},meta-group_{{ os_instance_tags }},{{ master_role }}-public_nodes,public_nodes"
    instance_name:                "{{ hostvars[ item ].openstack.name }}"
    os_uuid:                      "{{ hostvars[ item ].openstack.id }}"
    os_key_name:                  "{{ os_key_name }}"
    os_instance_tags:             "{{ os_instance_tags }}"
    ansible_ssh_host:             "{{ hostvars[ item ].openstack.public_v4 | default( '' ) }}"
    openstack:
      accessIPv4:                 "{{ hostvars[ item ].openstack.public_v4 | default( '' ) }}"
    publicIPv4:                   "{{ hostvars[ item ].openstack.public_v4 | default( '' ) }}"
    privateIPv4:                  "{{ hostvars[ item ].openstack.private_v4 | default( '' ) }}"
    os_cloud_publicnetwork_name:  "{{ os_cloud_publicnetwork_name | default( '' ) }}"
    os_cloud_publicnetwork_id:    "{{ os_cloud_publicnetwork_id | default( '' ) }}"
    os_cloud_publicsubnet_id:     "{{ os_cloud_publicsubnet_id | default( '' ) }}"
    os_cloud_publicsubnet_cidr:   "{{ os_cloud_publicsubnet_cidr | default( '' ) }}"
    os_cloud_privatenetwork_name: "{{ os_cloud_privatenetwork_name | default( '' ) }}"
    os_cloud_privatenetwork_id:   "{{ os_cloud_privatenetwork_id | default( '' ) }}"
    os_cloud_privatesubnet_id:    "{{ os_cloud_privatesubnet_id | default( '' ) }}"
    os_cloud_privatesubnet_cidr:  "{{ os_cloud_privatesubnet_cidr | default( '' ) }}"
    os_instancename_prefix:       ''
  with_items:                     "{{ groups[ master_role + '-public_nodes' ] }}"

- block:
  - name: refresh inventory with newly created private nodes detailed infos
    no_log:                         true
    add_host:
      name:                         "{{ hostvars[ item ].openstack.id }}"
      groups:                       "ansible_nodes,{{ master_role }},meta-group_{{ os_instance_tags }},{{ master_role }}-private_nodes,private_nodes"
      instance_name:                "{{ hostvars[ item ].openstack.name }}"
      os_uuid:                      "{{ hostvars[ item ].openstack.id }}"
      os_key_name:                  "{{ os_key_name }}"
      os_instance_tags:             "{{ os_instance_tags }}"
      ansible_ssh_host:             "{{ hostvars[ item ].openstack.private_v4 | default( '' ) }}"
      openstack:
        accessIPv4:                 "{{ ( hostvars[ item ].openstack.networks[ os_cloud_publicnetwork_name ] | default( [] ) )[ 0 ] | default( '' ) }}"
      public_v4:                    "{{ ( hostvars[ item ].openstack.networks[ os_cloud_publicnetwork_name ] | default( [] ) )[ 0 ] | default( '' ) }}"
      private_v4:                   "{{ ( hostvars[ item ].openstack.networks[ os_cloud_privatenetwork_name ] | default( [] ) )[ 0 ] | default( '' ) }}"
      publicIPv4:                   "{{ ( hostvars[ item ].openstack.networks[ os_cloud_publicnetwork_name ] | default( [] ) )[ 0 ] | default( '' ) }}"
      privateIPv4:                  "{{ ( hostvars[ item ].openstack.networks[ os_cloud_privatenetwork_name ] | default( [] ) )[ 0 ] | default( '' ) }}"
      os_cloud_publicnetwork_name:  "{{ os_cloud_publicnetwork_name }}"
      os_cloud_publicnetwork_id:    "{{ os_cloud_publicnetwork_id }}"
      os_cloud_publicsubnet_id:     "{{ os_cloud_publicsubnet_id }}"
      os_cloud_publicsubnet_cidr:   "{{ os_cloud_publicsubnet_cidr }}"
      os_cloud_privatenetwork_name: "{{ os_cloud_privatenetwork_name }}"
      os_cloud_privatenetwork_id:   "{{ os_cloud_privatenetwork_id }}"
      os_cloud_privatesubnet_id:    "{{ os_cloud_privatesubnet_id }}"
      os_cloud_privatesubnet_cidr:  "{{ os_cloud_privatesubnet_cidr }}"
      os_instancename_prefix: ''
    with_items:                     "{{ groups[ master_role + '-private_nodes' ] | default( [] ) }}"
  when:                           private_node_number > 0
